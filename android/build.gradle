apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.android.library'
apply plugin: 'maven-publish'

group = 'org.skynetsoftware'
version = '3.0.0'

android {
    compileSdkVersion 27
    buildToolsVersion "27.0.2"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

javadoc {
    failOnError false
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId group
            artifactId 'data-loader-android'
            version project.version

            artifact bundleRelease
            artifact sourcesJar
            artifact javadocJar

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                // List all compile dependencies and write to POM
                configurations.compile.getAllDependencies().each { Dependency dep ->
                    if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified")
                        return // ignore invalid dependencies

                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', dep.group)
                    if(dep.name == "core" || dep.name == "java" || dep.name == "cache")
                    {
                        dependencyNode.appendNode('artifactId', "data-loader-" + dep.name)
                    }
                    else
                    {
                        dependencyNode.appendNode('artifactId', dep.name)
                    }
                    dependencyNode.appendNode('version', dep.version)

                    if (!dep.transitive)
                    {
                        // If this dependency is transitive, we should force exclude all its dependencies them from the POM
                        def exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                        exclusionNode.appendNode('groupId', '*')
                        exclusionNode.appendNode('artifactId', '*')
                    }
                    else if (!dep.properties.excludeRules.empty)
                    {
                        // Otherwise add specified exclude rules
                        def exclusionsNode = dependencyNode.appendNode('exclusions')
                        dep.properties.excludeRules.each { ExcludeRule rule ->
                            def exclusionNode = exclusionsNode.appendNode('exclusion')
                            exclusionNode.appendNode('groupId', rule.group ?: '*')
                            exclusionNode.appendNode('artifactId', rule.module ?: '*')
                        }
                    }
                }
            }
        }
    }
}

bintray {
    override = true
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    publications = ['mavenJava']
    pkg {
        repo = 'maven'
        name = 'org.skynetsoftware.data-loader-android'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/pedja1/data-loader.git'
        version {
            name = project.version
            desc = 'Loading data from multiple sources with ease'
            released = new Date()
            //vcsTag = '1.3.0'
            //attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin']
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile project (':core')
}
